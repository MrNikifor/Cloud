package Introduction;
/*
    Домашняя работа №1

1.В начале будет рассмотрено создание элементарного клиент-сервера,
 для усвоения базовых знаний, на основе которых будет строиться многопоточная архитектура.

 — Потоки: для того чтобы не перепутать что именно подразумевается под потоком я буду использовать существующий
  в профессиональной литературе синоним — нить, чтобы не путать Stream и Thread, всё-таки более профессионально
   выражаться — нить, говоря про Thread.

— Сокеты(Sockets): данное понятие тоже не однозначно, поскольку в какой-то момент сервер выполняет — клиентские действия,
 а клиент — серверные. Поэтому я разделил понятие серверного сокета — (ServerSocket) и сокета (Socket)
  через который практически осуществляется общение, его будем называть сокет общения, чтобы было понятно о чём речь.

 Многопоточный сервер – сам по себе этот сервер не участвует в общении напрямую, а лишь является фабрикой однонитевых
  делегатов(делегированных для ведения диалога с клиентами серверов) для общения с вновь подключившимися клиентами,
   которые закрываются после окончания общения с клиентом.

2.Нужно передать файл любого размера через Socket, желательно чтобы к этому возможно было прикрутить прогрессбар.
 (Интересуют именно файлы, Socket вполне работает, и к моменту передачи клиент и сервер готовы отдавать/принимать файл)

3.Если мне нужно отправить больше данных после завершения файла, мне необходимо выяснить количество байтов,
  из которых состоит файл. Затем я могу отправить количество байтов заранее через сокет на сервер.
  На сервере прочитайте только то, что много байтов информации для файла, а затем сделать то же самое для остальных данных,
   которые я собираетесь отправить.
  Эта стратегия предварительной отправки файла рекомендуется и в основном используется при любой передаче данных.
  Если я могу это сделать, мне не нужно полагаться на обнаружение java.io.EOFException для обнаружения конца данных.

4.Связать tcp сокет с потоком ввода-вывода и гоняете строки. В каждой команда и соответствующие данные.
 Полностью аналогично вводу-выводу с терминала.

5.Данные пользователей.

6. Соединение = УстановитьСоединениеFTP(ПараметрыПодключения);
        Если Соединение<>Неопределено Тогда
         ПутьНаСервере=ПутьНаСервере+"zakaz/";
         МассивФайлов=Соединение.НайтиФайлы(ПутьНаСервере,"*.xml",Ложь);
         Для Каждого Элемент Из МассивФайлов Цикл
            Соединение.Получить(ПутьНаСервере+Элемент.Имя ,КаталогВременныхФайлов()+Элемент.Имя);
            Соединение.Удалить(ПутьНаСервере,Элемент.Имя);
            ПрочитатьXMLФайл(КаталогВременныхФайлов()+Элемент.Имя);
            УдалитьФайлы(КаталогВременныхФайлов(),Элемент.Имя);
        КонецЦикла;
    КонецЕсли;
7. Буду использовать:
Графика - JavaFX;
Сервер - Netty
Клиент - Nio
Данные - Serialisible
 */
public class Introduction {

}
